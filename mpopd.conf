##########  mpopd/Mail::POP3Server configuration  ##########
$mpopd_conf_version = "2.22";
############################################################

#### The first 3 config items are only relevant when running mpopd
#### as a standalone daemon.
#
#--- Port to listen on, 110 being the default and standard pop3 port.
#--- Only relevant in daemon mode of course.
#
$port = "110";
#
#--- Maximum number of concurrent server processes to allow. Each child
#--- server exits after the client sends a 'QUIT', a bogus request or
#--- the wait for a command exceeds $timeout below.
#
$max_servers = 10;
#
#--- Full path to where mpopd should write its pid file.
#
$mpopd_pid_file = "/var/run/mpopd.pid";

#--- Global timeout for receiving valid commands, in seconds. If no new command
#--- is received during this interval then a graceful shutdown occurs. Any emails
#--- flagged for deletion will be returned to the mailbox instead.
#
$timeout = 90;

# The initial POP3 greeting message sent to the client. Maximum of 50 chars.
#
$greeting = "Welcome to mpopd V$mpopd_conf_version.... :)";

#--- If $parse_to_disk is == 1 (default) the mailbox parsing and processing
#--- will be done in a root-owned temporary dir on disk instead of in memory.
#--- The memory-based model is obviously not suited to systems with a high number
#--- of users, unless disk space is running low. A 5MB mailbox could result in
#--- an 8MB mpop process. However, the total turnaround of email out of a
#--- Berkeley-style 'mbox' mailbox is fast. I have used the memory-based processing
#--- successfully for several years on several servers, one with around 420 users,
#--- but to be honest with today's disk- space, speed and prices there doesn't
#--- seem any point. I now use disk-based parsing with 'mbox' mailboxes.
#
$parse_to_disk = 1;

#--- If parsing messages to disk the directory below will be used to hold the temporary
#--- message files. Both this directory and a directory for each user, when they first
#--- access their mail, will be created automatically.
#--- This must be correctly defined for $parse_to_disk to work.
#
$mpopd_spool = "/var/spool/mpopd_spool";

#--- A 'Status:' header will be added and updated if $status is set to 1
#--- Status: 0 means message has been opened, Status: RO means opened and retrieved
#--- This is a header derived from IMAP and can be used by web-mail systems to
#--- track which messages have been opened/read by the user.
$status = 1;

#--- To use qmail-style 'maildir' mailboxes set $use_maildir to 1. This has been
#--- tested but is the latest addition to mpop and hasn't seen much production
#--- use yet. It's a simple implementation. No checks are made in the tmp dir and
#--- messages that have been read are not moved to the cur dir.
#
#--- If set to 1 $use_maildir overrides the $mail_spool_dir setting for the
#--- central system mail spool.
#
$use_maildir = 0;

#--- The home directory for locating a user's maildir directory.
#--- If this is not set or if mpop cannot find $path_to_homedir/<user>/Maildir
#--- mpop gets the user's home dir from /etc/passwd and reads the ~/.qmail file
#--- to look for something like ./Maildir/
#
$path_to_homedir = "/home";

#####--- The next 5 config items only apply if you are ####
#####--- using a Berkeley mbox type of email mailbox.   ####
#
#--- The string to look for that defines the start of a new message.
#--- Berkeley mbox usually uses a 'From ' in the first line, before
#--- all other headers, so that is what mpop looks for if $message_start
#--- is not defined.
#
$message_start = "From ";

#--- The string/pattern to look for as the message separator. mpop looks
#--- for a blank line if this is not defined (/^\\s+\$/). Remember to use
#--- \ escaping if you want to match @, $, \s etc.
#
$message_end = "^\\s+\$";

#--- The numerical group ID for the user 'mail'.
#
$mailgroup = 12;

#--- Optional auto-retry if mail box is locked. The value is the number of
#--- retries that will be made. Each retry sleeps for 1 second. In the retry
#--- period no response is sent to the client. Not required for most systems.
#
#$retry_on_lock = 10;

#################  Mail spool locations  ##################

#--- Path to mail boxes. Defaults to /var/spool/mail for Berkeley 'mbox' format.
#
$mail_spool_dir = "/var/spool/mail";

#--- Path to where FAILED mail transfers are placed. Any emails
#--- not flagged for deletion are placed here with the login and
#--- timestamp if the original maildrop is somehow altered during a session.
#--- The $failmailspool will be created if it doesn't exist. All files
#--- in $failmailspool will be owned by root and 0600.
#
$mpopd_failed_mail = "/var/spool/mpopd_failed_mail";

#--- Top level dir for hostname-linked email drops. This must be created
#--- by hand. The hostname-linked email drops are the least tested of all!
#--- Please view this whole side of mpopd as EXPERIMENTAL!
#
$host_mail_path = "/var/spool/popmail";

#################  User authentication  ###################

#--- You can reject connections at the 'USER' stage if the following
#--- option is set to 1 (although to do so goes against an RFC).
#--- If set to 0 a fake password request/authentication will be done.
#--- The connection attempt will be logged in either case if $debug == 1
#
$reject_bogus_user = 0;

#--- You can choose to accept clients that don't pass the reverse lookup
#--- by setting $allow_non_fqdn = 1, but please check if you really need
#--- to do this. Remember that unlike mpop when run from inetd mpopd cannot
#--- be protected by tcpwrappers. (If this is for an Intranet-only then it
#--- is probably safe to set $allow_non_fqdn = 1 here.)
#
$allow_non_fqdn = 0;

#--- Full path to a file containing IP's and networks we trust. Any address
#--- in this file that matches a connecting client will override the $allow_non_fqdn
#--- setting. However, it does not override the $hosts_allow_deny entries.
#
$trusted_networks = "/usr/local/mpopd/mpopd_trusted";

#--- An optional list of IP addresses, subnets or host names to be
#--- allowed, rejected, or logged with a WARN flag. You are strongly
#--- advised to use this on public mail servers since mpopd does not
#--- have the protection of tcpwrappers. The format is simple:
#--- DENY | ALLOW | WARN	host, IP, subnet or name
#--- Each line can be one action, DENY, ALLOW or WARN, followed by
#--- an IP, subnet, hostname or 'ALL'. If the special rule 'DENY ALL'
#--- appears anywhere then a client will be refused unless they match
#--- at least one 'ALLOW' line.
#--- Blank lines or lines starting with '#' are skipped.
#
$hosts_allow_deny = "/usr/local/mpopd/mpopd_allow_deny";

#--- Main type of auth to use. Possible values: 1, 2, 3, 4, 5 or 6
#--- (See also per-user authentication below)
#
$auth_type = 1; # standard mailspool/Maildir and /etc/passwd (and /etc/shadow if $shadow)
#
#--- Types 2 - 5 allow the use of hashed mailspool directories as follows:
#--- /var/spool/a/adomain.co.uk/<username> where adomain.co.uk corresponds
#--- to the user's remote hostname. Only mbox-like single-file mailboxes are
#--- currently supported for 2 - 6
#--- Types 4 and 5 can be used for virtual users with a hostname check.
#--- Type 6 is for virtual users from anywhere with no remote/hostname checks.
#
#$auth_type = 2; # 1 + hostname lookup
#$auth_type = 3; # 2 + remote access UID like: markjt@fredo.co.uk
#$auth_type = 4; # hostname lookup + $userlist only
#$auth_type = 5; # 4 + remote access UID like: markjt@fredo.co.uk
#
#--- For virtual users whose mailboxes are all owned by a common system user
#--- and are located in a central mailspool dir type 6 is the correct setting.
#--- $userlist is used for authentication and no remote/hostname checks are made.
#$auth_type = 6;
#
#--- Type 7 is a basic form of plugin. You supply the entire code in 2 perl scripts.
#--- One must do the username validation and the other the password verification phase.
#--- Each script must return 0 for success and 2 for failure. You must supply the full
#--- path to both scripts in the variables $username_plugin and $password_plugin
#--- Very basic example scripts are included in the mpop-2.0x.tar.gz
#--- The two phases are handled seperately allowing for client rejection at the
#--- USER .... dialog. This is actually not recommended in the rfc's but I've found
#--- it to be very handy, even if only during debugging when a valid user can't connect.
#$auth_type = 7;
#$username_plugin = "/usr/local/mpopd/mpopd_username_plugin";
#$password_plugin = "/usr/local/mpopd/mpopd_password_plugin";

#--- The name of the password file for virtual and/or hostname-linked access.
#--- This only has any effect if $auth_type == 2,3,4,5 or 6
#--- Format: username:password:uid
#---              e.g. markjt:$1$d56geIhf$agr7nng92bgf32:100
#--- For virtual users the uid should correspond to the system 'mail' user
#--- or a special 'mpopd' system user in /etc/passwd
$userlist = ".userlist";

#--- Per-user authentication type. This overrides whatever may be set
#--- as the main authentication type above. However, if the type == 7
#--- then the same plugin files will be used.
#
$user_auth{'jbloggs'} = 1;

#--- Use crypt_MD5 without PAM. This may not be necessary with Slackware 7.x
#--- as the crypt library in later packages supports both the older 8-char-safe
#--- passwords as well as the newer > 8 chars, $1$<seed>$...... md5 type.
#--- If in doubt install the Crypt::PasswdMD5 module and set $md5_no_pam = 1
#
#$md5_no_pam = 1;

#--- Use PAM (most post 1999 Linux distros?). This only has effect for
#--- $auth_type == 1, 2 or 3
#
#$use_pam = 1;

#--- The PAM service to use for PAM-based authentication. This is converted
#--- to lowercase, so make sure the service name/filename is also lowercase
#
$mpopd_pam_service = "mpopx";

#--- If this is defined then shadow passwords will be used
#--- Full "/path/filename" of shadow password file.
#
$shadow = "/etc/shadow";

#--- Ignore the $host_mail_path setting and use the system $mail_spool_dir
#--- for all maildrops but still use $userlist to get the password.
#
$switch = 1;

#--- Do not print the passwd in the debug logs unless $passsecret = 0
#--- It goes without saying that this is only intended for debugging purposes :)
#
$passsecret = 1;

#################  Logging and debugging  ###################

#--- If this is defined then individual user logs are kept inside
#--- the $log_dir directory. Two values can be used:
#--- 1 for Date/time and bytes sent only, plus sign-off.
#--- 2 for debug logging of all commands.
#--- It must be $log{'<user_name>}
#
$user_log{'jbloggs'} = 1;
#$user_log{'user2'} = 1;
#--- make sure the name is quoted for usernames with hyphens
#$user_log{'use-r3'} = 1;

#--- When using disk-based parsing/spooling, or maildir, the spool files
#--- will be left in place for a particular user if $debug_<user> is
#--- set to 1. Can be useful for debugging.
#
#$debug{jbloggs} = 1;

#--- The directory where all user-logs are stored
#
$user_log_dir = "/var/log/mpopd_log";

#--- Central log file
#
$debug_log = "/var/log/mpopd.log";

#--- Main debugging flag for the above debug log. If $debug is set to 1 then
#--- DENY, ALLOW and WARN, are logged here, plus a few other significant occurances,
#--- together with the connection time and client-IP address.
#
$debug = 1;

#--- If email is to be collected via POP3 for another server with
#--- something like fetchmail then set this to 1 for each maildrop.
#--- It must be $forwardto{username}  with the username as the key.
#
$forwardto{jsmith} = 1;

#--- This is for appearances only and is the 'Received: from ...' bit
#--- of the final message header. It should be the fully qualified
#--- domain name of your email server.
#
$receivedfrom = "yourhost.co.uk";

#--- Your local timezone for the Received: header
#
$timezone = "GMT";

########################################################################
